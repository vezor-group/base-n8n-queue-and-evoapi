volumes:
  postgres-data:
  redis-data:
  n8n-data:
  evolution-instances:


networks:
  n8n-network:


services:
  # ------------------ DBs ------------------
  postgres:
    image: pgvector/pgvector:pg16
    container_name: postgres
    restart: unless-stopped
    env_file: .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-postgres:/docker-entrypoint-initdb.d:ro # cria DB evolution-app e extens√£o pgvector
    networks: [ n8n-network ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER" ]
      interval: 10s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    command: [ "redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}" ]
    volumes:
      - redis-data:/data
    networks: [ n8n-network ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      retries: 5

  # ------------------ n8n ------------------
  n8n-editor:
    image: n8nio/n8n:latest
    container_name: n8n-editor
    restart: unless-stopped
    command: start
    ports:
      - "5678:5678"
    env_file: .env
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    networks: [ n8n-network ]

  n8n-webhook:
    image: n8nio/n8n:latest
    container_name: n8n-webhook
    restart: unless-stopped
    command: webhook
    env_file: .env
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    networks: [ n8n-network ]

  n8n-worker:
    image: n8nio/n8n:latest
    container_name: n8n-worker
    restart: unless-stopped
    command: worker --concurrency=10
    env_file: .env
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    networks: [ n8n-network ]

  # ------------------ Evolution API ------------------
  evolution-api:
    image: evoapicloud/evolution-api:latest
    container_name: evolution-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    env_file: .env
    volumes:
      - evolution-instances:/evolution/instances
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    networks: [ n8n-network ]
